= TEST PROJECT =

It's a exercise for a grails position. Must be completed in 3 hours. A pdf file with description could be found in the root folder.

Application is a front-end to register users and incudes a Rest service to permits to reuse the functionality. 

== Requirements and assumptions ==

* Application could be consumed fot other grails applications, and non grails applications (mobile, j2EE ..)
** For this reason de app is not a  grails plugins

* The application uses a command object model to centralized validation. User registration sometime requires validations that are out of domain classes scope (like password validation)

* The application is designed to be open to new changes (there was doubt whether the requirements).

* have done tests, but not strict TDD. Tests are the best documentation

== Implemented  solution ==

* A grails application that acts like web front-end. This application has a REST API that permits to other applications use the library.

* UserService has de business logic, a command object permits the creation constraints complementing Domain constraints.
Valid Domain and emails could be configured in Config.groovy.

* One simple controller for the api, and one simple controller for web app permits small and more clean controllers.

* grails.views.default.codec was changed to 'html' for security

* Views and error messages use i18n

== Unresolved problems ==

* Save in XML Data Store.

** If this is necessary for prototyping purposes, I will overwrite the save method of the domain class in bootstrap.groovy.
In this way it could be disable using a property from config.groovy

* Detect where the user comes.

** If the application is mapped in different domains, we could try to use de referer header parameter to parse and obtain domain. Other way is use the user locale but it isn't a safe method because the user could be using a computer
   with a incorrect locale.
** We can detect the locale, suggest a domain but allow the user to change it.

== TODO ==

Add custom messages for validation messages in command object
Add typical user restriction (unique username, unique email ... )